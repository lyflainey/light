<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration debug="false" scan="true" scanPeriod="60 seconds"
	packagingData="true">

	<!-- ******************** appender：日志目的地 start ******************** -->

	<!-- 标准输出：stdout -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<Target>System.out</Target>
		<!-- encoder 默认配置为PatternLayoutEncoder -->
		<encoder>
			<pattern>[%p] %d{"yyyy-MM-dd HH:mm:ss,SSS",GMT+0800} %-8r [%t] %logger{0} - %m%n</pattern>
		</encoder>
	</appender>
	<appender name="consoleAsync" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref ="console"/>
	</appender>

	<!-- 文件输出："timerLog" -->
	<appender name="timerLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Append>true</Append>
		<File>logs/timer.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>logs/timer.log.%d{yyyy-MM-dd_HH}</FileNamePattern>
		</rollingPolicy>
		<encoder>
			<pattern>[%p] %d{"yyyy-MM-dd HH:mm:ss,SSS",GMT+0800} %-8r [%t] - %m%n</pattern>
		</encoder>
	</appender>
	<appender name="timerLogAsync" class="ch.qos.logback.classic.AsyncAppender">
		<discardingThreshold>0</discardingThreshold>
		<queueSize>256</queueSize>
		<neverBlock>true</neverBlock>
		<appender-ref ref ="timerLog"/>
	</appender>

	<!-- 文件输出："exposureLog" -->
	<appender name="exposureLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Append>true</Append>
		<File>logs/exposure.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>logs/exposure.log.%d{yyyy-MM-dd_HH}
			</FileNamePattern>
		</rollingPolicy>
		<encoder>
			<pattern>%m%n</pattern>
		</encoder>
	</appender>
	<appender name="exposureLogAsync" class="ch.qos.logback.classic.AsyncAppender">
		<discardingThreshold>0</discardingThreshold>
		<queueSize>512</queueSize>
		<appender-ref ref ="exposureLog"/>
	</appender>

	<!-- 文件输出："resultLog" -->
	<appender name="resultLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Append>true</Append>
		<File>logs/result.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>logs/result.log.%d{yyyy-MM-dd_HH}</FileNamePattern>
		</rollingPolicy>
		<encoder>
			<pattern>%m%n</pattern>
		</encoder>
	</appender>
	<appender name="resultLogAsync" class="ch.qos.logback.classic.AsyncAppender">
		<discardingThreshold>0</discardingThreshold>
		<queueSize>512</queueSize>
		<appender-ref ref ="resultLog"/>
	</appender>

	<!-- 文件输出："requestLog" -->
	<appender name="requestLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Append>true</Append>
		<File>logs/request.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>logs/request.log.%d{yyyy-MM-dd_HH}</FileNamePattern>
		</rollingPolicy>
		<encoder>
			<pattern>%m%n</pattern>
		</encoder>
	</appender>
	<appender name="requestLogAsync" class="ch.qos.logback.classic.AsyncAppender">
		<discardingThreshold>0</discardingThreshold>
		<queueSize>256</queueSize>
		<appender-ref ref ="requestLog"/>
	</appender>

	<!-- 文件输出："testLog" -->
	<appender name="testLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Append>true</Append>
		<File>logs/test.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>logs/test.%d{yyyy-MM-dd_HH_mm}.log</FileNamePattern>
		</rollingPolicy>
		<encoder>
			<pattern>%m%n</pattern>
		</encoder>
	</appender>

	<!-- ******************** appender：日志目的地 end ******************** -->

	<!-- ******************** logger：精确配置package或class的level、appender,可以配置0个或多个 
		end ******************** -->
	<!-- level:日志级别（logger中的level会覆盖root中的，即以logger中为准，不管是否向上传递） name:包名 或 类的全路径 
		addtivity:日志信息是否向上（root）传递 -->
	
	<logger name="com.mchange" level="ERROR"/>
	<logger name="com.netflix.hystrix" level="ERROR"/>
	<logger name="httpclient.wire" level="ERROR"/>
	<logger name="org.apache" level="ERROR"/>
	<logger name="org.mybatis" level="ERROR"/>
	<logger name="org.springframework" level="ERROR"/>
	<logger name="TimerLog" additivity="false" level="DEBUG">
		<appender-ref ref="timerLogAsync"/>
	</logger>
	<logger name="ExposureLog" additivity="false" level="INFO">
		<appender-ref ref="exposureLogAsync"/>
	</logger>
	<logger name="ResultLog" additivity="false" level="INFO">
		<appender-ref ref="resultLogAsync"/>
	</logger>
	<logger name="RequestLog" additivity="false" level="INFO">
		<appender-ref ref="requestLogAsync"/>
	</logger>
	<logger name="TestLog" additivity="false" level="INFO">
		<appender-ref ref="testLog"/>
	</logger>

	<!-- ******************** logger：精确配置package或class日志的level、appender end 
		******************** -->

	<!-- ******************** root：定义日志的level、appender，且最多只能配置一个 start ******************** -->

	<!--TRACE < DEBUG < INFO < WARN < ERROR -->
	<root level="DEBUG">
		<appender-ref ref="consoleAsync"/>
	</root>

	<!-- ******************** root：定义日志的level、appender，且最多只能配置一个 end ******************** -->
</configuration>